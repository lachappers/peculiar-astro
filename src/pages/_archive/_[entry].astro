---
import type { GetStaticPaths } from "astro";
import { CONTENTSETTINGS } from "@config";
import { getAllTaxonomy, getTaxonomy } from "@utils/taxonomyParser";
import { slugify } from "@utils/textConverter";
import { CollectionEntry, getCollection } from "astro:content";

// components
import DefaultLayout from "@layouts/DefaultLayout.astro";
import Pagination from "@components/shared/Pagination.astro";
import PaginationMinimal from "@components/unused/PaginationMinimal.astro";
import Card from "@components/common/Card.astro";
import PageHeader from "@components/shared/PageHeader.astro";
import BlogCard from "@components/common/BlogCard.astro";
import IndexSidebar from "@components/shared/IndexSidebar.astro";

const sidebarCountFilters: string[] = CONTENTSETTINGS.blog.sidebarCountFlters;
const sidebarFilters: string[] = CONTENTSETTINGS.blog.sidebarFilters;
const blogFolder: string = "blog";
const pathname = new URL(Astro.request.url).pathname.split("/");
const firstPath = pathname[1];

export async function getStaticPaths() {
  const blogs = await getCollection("blog");
  const allCats = CONTENTSETTINGS.blog.sidebarCountFilters.concat(
    CONTENTSETTINGS.blog.sidebarFilters
  );

  return allCats.flatMap((cat: string) => {
    // console.log(blogs);
    const uniqueEntries = [
      ...new Set(blogs.map((blog) => blog.data[cat]).flat()),
    ];
    // console.log(uniqueEntries);
    return uniqueEntries.flatMap((entry) => {
      const filteredBlogs: string[] = blogs.filter((blog: any) =>
        blog.data[cat].includes(entry)
      );
      // console.log(filteredBlogs);
      // console.log(`/${slugify(cat)}/${slugify(entry)}`);
      return {
        params: { filter: slugify(cat), entry: slugify(entry) },
        props: { blogs: filteredBlogs },
      };
    });
  });
}

const { entry }: { entry: string } = Astro.params;
const blogs: string[] = Astro.props;
// console.log(blogs);
---

<!-- <p>Hello {filter}</p> --><!-- <p>{filterProp}</p> -->
<p>Yay {entry}</p>
<DefaultLayout title="Blog">
  <PageHeader title="Blog Posts" />
  <section class="flex w-full flex-col items-center justify-start">
    <div
      class="max-w-screen-3xl flex w-full flex-auto flex-wrap items-start justify-center p-4 md:p-16"
    >
      <!-- blog posts -->
      <div class="flex min-h-full w-full flex-col lg:w-2/3 lg:basis-auto">
        <div class="flex flex-wrap items-stretch justify-center">
          <!-- {
            blogs.map((post) => (
              <div class="mb-14 flex w-full flex-auto  px-4 sm:min-h-full md:w-1/2 md:basis-auto">
                <BlogCard data={post} />
              </div>
            ))
          } -->
        </div>
        <!-- {
          page.total > CONTENTSETTINGS.indexPagination && (
            <PaginationMinimal
              length={page.lastPage}
              currentUrl={page.url.current}
              currentPage={page.currentPage}
              firstUrl={`/${firstPath}`}
              prevUrl={page.url.prev}
              nextUrl={page.url.next}
              lastUrl={`/${firstPath}/${page.lastPage}`}
            />
          )
        } -->
      </div>

      <!-- sidebar -->
      <!-- <IndexSidebar
        collection={blogFolder}
        sidebarCountFilters={sidebarCountFilters}
        sidebarFilters={sidebarFilters}
      /> -->
    </div>
  </section>
</DefaultLayout>
