---
import type { GetStaticPaths } from "astro";
import { CONTENTSETTINGS } from "@config";
import { slugify, humanize, pluralize } from "@utils/textConverter";
import { getCollection } from "astro:content";
import { Icon } from "astro-icon/components";

// components
import DefaultLayout from "@layouts/DefaultLayout.astro";
// import Pagination from "@components/unused/Pagination.astro";
import PaginationMinimal from "@components/shared/PaginationMinimal.astro";
import PageHeader from "@components/shared/PageHeader.astro";
import BlogCard from "@components/common/BlogCard.astro";
// import IndexSidebar from "@components/shared/IndexSidebar.astro";

interface Route {
  params: {
    filter: string;
    taxonomy: string;
  };
  props: {
    title: string;
  };
}

interface Pagination {
  data: any[]; // replace any with the actual type of the data
}

export async function getStaticPaths({ paginate }) {
  const filters: string[] = CONTENTSETTINGS.blog.sidebarCountFilters.concat(
    CONTENTSETTINGS.blog.sidebarFilters
  );
  // const blogs = await getCollection("blog");
  const allPosts = await getCollection("blog", ({ data }) => {
    // return data.draft !== true;
    // Filter out content entries with `draft: true` only when building for production
    return import.meta.env.PROD ? data.draft !== true : true;
  });
  // for (const filter of filters) {
  const paths = filters.flatMap((filter) => {
    const taxonomies = [
      ...new Set(allPosts.map((blog) => blog.data[filter]).flat()),
    ];

    return taxonomies.flatMap((taxonomy) => {
      const filteredBlogs = allPosts.filter((blog: any) =>
        blog.data[filter].includes(taxonomy)
      );

      return paginate(filteredBlogs, {
        params: { filter: filter, taxonomy: slugify(taxonomy) },
        props: { title: taxonomy, taxonomies: taxonomies },
        pageSize: 2,
      });
    });
  });
  return paths;
}

const { filter, taxonomy }: { filter: string; taxonomy: string } = Astro.params;
const { page, taxonomies } = Astro.props;

const pathname = new URL(Astro.request.url).pathname;
const firstPath = isNaN(Number(pathname.split("/").slice(-1)))
  ? pathname
  : pathname.split("/").slice(0, -1).join("/");

// console.log(entry);
// console.log(filter);

// console.log(page.data.map((blog) => blog.data[filter].flat()));

// console.log(Astro.props);
// console.log(Astro.params);
---

<DefaultLayout title=`${humanize(taxonomy)} Blogs`>
  <PageHeader title={humanize(taxonomy)} breadcrumbs />
  <!-- other filter entries -->
  <aside
    class="mx-4 flex max-w-full flex-col items-center gap-1 rounded border-[3px] border-[--font-color] bg-[--secondary-background] p-6 sm:max-w-screen-md sm:flex-row md:gap-4"
  >
    <h3 class="text-lg uppercase">
      All {pluralize(taxonomies.length, humanize(filter))}
    </h3>

    <ul
      class="flex flex-wrap items-center justify-center text-base sm:gap-2 sm:text-lg"
    >
      {
        taxonomies.map((tag: any) => {
          return (
            <li class="inline-block">
              <a
                class="filter-item   m-1 block rounded bg-[--neutral-background] px-3 py-1 hover:bg-[--primary-background] "
                href={`/blog/${slugify(filter)}/${slugify(tag)}`}
              >
                {humanize(tag)}
              </a>
            </li>
          );
        })
      }
    </ul>
  </aside>
  <a
    href="/blog"
    class="flex items-center gap-2 rounded-md bg-[--primary-container] px-5 transition hover:bg-[--inverse-primary]"
  >
    <Icon name="mdi:arrow-left" />
    Back to Blog
  </a>
  <section
    class="flex w-full flex-col items-center justify-start px-4 md:px-16"
  >
    <div
      class="max-w-screen-3xl flex w-full flex-auto flex-wrap items-start justify-center"
    >
      <!-- blog posts -->
      <div
        class="flex min-h-full w-full flex-col items-center lg:w-2/3 lg:basis-auto"
      >
        <div
          class="mb-8 flex w-full min-w-full flex-wrap items-stretch justify-center gap-4 md:mb-16"
        >
          {
            page.data.map((post) => (
              <div class="w-full min-w-96 max-w-lg flex-auto grow sm:min-h-full sm:w-1/3 md:basis-auto">
                <BlogCard data={post} />
              </div>
            ))
          }
        </div>
        <!-- pagination -->
        {
          page.total > CONTENTSETTINGS.indexPagination && (
            <PaginationMinimal page={page} baseUrl={firstPath} />
          )
        }
      </div>

      <!-- sidebar -->
      <!-- <IndexSidebar collection={blogFolder} sidebarFilters={sidebarFilters} /> -->

      <div class="mt-8 text-center"></div>
    </div>
  </section>
</DefaultLayout>
