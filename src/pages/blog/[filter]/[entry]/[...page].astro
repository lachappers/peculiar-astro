---
import type { GetStaticPaths } from "astro";
import { CONTENTSETTINGS } from "@config";
import { getAllTaxonomy, getTaxonomy } from "@utils/taxonomyParser";
import { slugify, humanize, pluralize } from "@utils/textConverter";
import { getCollection } from "astro:content";
import { getCollectionFilter } from "@utils/contentParser";
import { Icon } from "astro-icon/components";

// components
import DefaultLayout from "@layouts/DefaultLayout.astro";
// import Pagination from "@components/unused/Pagination.astro";
import PaginationMinimal from "@components/shared/PaginationMinimal.astro";
import PageHeader from "@components/shared/PageHeader.astro";
import BlogCard from "@components/common/BlogCard.astro";
// import IndexSidebar from "@components/shared/IndexSidebar.astro";

interface Route {
  params: {
    filter: string;
    entry: string;
  };
  props: {
    title: string;
  };
}

interface Pagination {
  data: any[]; // replace any with the actual type of the data
}

export async function getStaticPaths({ paginate }) {
  const filters: string[] = CONTENTSETTINGS.blog.sidebarCountFilters.concat(
    CONTENTSETTINGS.blog.sidebarFilters
  );
  const blogs = await getCollection("blog");
  // for (const filter of filters) {
  return filters.flatMap((filter) => {
    const entries = [...new Set(blogs.map((blog) => blog.data[filter]).flat())];

    return entries.flatMap((entry) => {
      const filteredBlogs = blogs.filter((blog: any) =>
        blog.data[filter].includes(entry)
      );

      return paginate(filteredBlogs, {
        params: { filter: filter, entry: slugify(entry) },
        props: { title: entry, entries: entries },
        pageSize: 2,
      });
    });
  });
}

const { filter, entry }: { filter: string; entry: string } = Astro.params;
const { page, entries } = Astro.props;

const pathname = new URL(Astro.request.url).pathname;
const firstPath = isNaN(Number(pathname.split("/").slice(-1)))
  ? pathname
  : pathname.split("/").slice(0, -1).join("/");

// console.log(entry);
---

<DefaultLayout title=`${humanize(entry)} Blogs`>
  <PageHeader title={humanize(entry)} breadcrumbs />
  <!-- other filter entries -->
  <aside
    class="flex w-full max-w-screen-md items-center gap-4 rounded border-[3px] border-[--font-color] bg-[--secondary-background] p-6"
  >
    <h3 class="text-lg uppercase">
      All {pluralize(entries.length, humanize(filter))}
    </h3>

    <ul class="flex flex-wrap items-center justify-center gap-2 text-lg">
      {
        entries.map((tag: any) => {
          return (
            <li class="inline-block">
              <a
                class="filter-item   m-1 block rounded bg-[--neutral-background] px-3 py-1 hover:bg-[--primary-background] "
                href={`/blog/${slugify(filter)}/${slugify(tag)}`}
              >
                {humanize(tag)}
              </a>
            </li>
          );
        })
      }
    </ul>
  </aside>
  <a
    href="/blog"
    class="flex items-center gap-2 rounded-md bg-[--primary-container] px-5 transition hover:bg-[--inverse-primary]"
  >
    <Icon name="mdi:arrow-left" />
    Back to Blog
  </a>
  <section
    class="flex w-full flex-col items-center justify-start px-4 md:px-16"
  >
    <div
      class="max-w-screen-3xl flex w-full flex-auto flex-wrap items-start justify-center p-4 md:p-16"
    >
      <!-- blog posts -->
      <div
        class="flex min-h-full w-full flex-col items-center lg:w-2/3 lg:basis-auto"
      >
        <div
          class="mb-14 flex h-full min-h-full flex-wrap items-stretch justify-center gap-4"
        >
          {
            page.data.map((post) => (
              <div class=" max-w-sm flex-auto grow sm:min-h-full sm:px-4 md:w-1/2 md:basis-auto">
                <BlogCard data={post} />
              </div>
            ))
          }
        </div>
        <!-- pagination -->
        {
          page.total > CONTENTSETTINGS.indexPagination && (
            <PaginationMinimal page={page} baseUrl={firstPath} />
          )
        }
      </div>

      <!-- sidebar -->
      <!-- <IndexSidebar collection={blogFolder} sidebarFilters={sidebarFilters} /> -->

      <div class="mt-8 text-center"></div>
    </div>
  </section>
</DefaultLayout>
