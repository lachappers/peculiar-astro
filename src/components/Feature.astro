---
import { Icon } from "astro-icon/components";

const {
  icon = "mdi:rocket",
  title = "Title",
  featureColor = "neutral",
  href = null,
  contentClasses = "",
  featureWidth,
} = Astro.props;
---

{
  !href ? (
    <div class={`feature ${featureWidth} ${featureColor}`}>
      <div class={`flex flex-col gap-2 ${contentClasses}`}>
        <Icon name={icon} class="text-4xl" />
        <h3>{title}</h3>
      </div>

      <div class={`content max-w-[60ch] ${contentClasses}`}>
        <slot>
          <p>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Hic,
            corporis.
          </p>
        </slot>
      </div>
    </div>
  ) : (
    <a {href} class={`featureLink flex ${featureWidth}`}>
      <div class={`feature ${featureColor}`}>
        <div class={`flex flex-col gap-2 ${contentClasses}`}>
          <Icon name={icon} class="text-4xl" />
          <h3>{title}</h3>
        </div>
        <div class={`content max-w-[60ch] ${contentClasses}`}>
          <slot>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Hic,
            corporis.
          </slot>
        </div>
      </div>
    </a>
  )
}

<style lang="scss">
  @use "../assets/scss/base/breakpoint" as *;

  .feature {
    position: relative;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    // justify-content: space-between;
    gap: 0.75rem;
    height: 100%;

    border: 3px solid var(--neutral-900);
    box-shadow: 0.0625rem 0.0625rem 0 var(--secondary-100),
      0.5rem 0.5rem 0 var(--dark-100);
    border-radius: 0.5rem;

    > * {
      position: relative;
      z-index: 2;
    }

    @include breakpoint(large) {
      width: 100%;
    }
  }

  .content {
    height: 100%;
    // flex: auto;
    display: flex;
    flex-direction: column;
    // justify-content: center;

    gap: 0.75rem;
  }

  .content > div:last-child {
    // padding-top: 1rem;
    // padding: .5rem 0;
    // background-color: salmon;
    // border: 1px solid salmon;
  }

  :global(.feature [astro-icon]) {
    // width: 4rem;
    // color: var(--action-color);
  }

  :global(.darkmode .feature) {
    background-color: var(--dark-100);
    // border: 3px solid var(--neutral-300);
    box-shadow: 0.0625rem 0.0625rem 0 var(--dark-100),
      0.5rem 0.5rem 0 var(--secondary-100);
    border-radius: 0.5rem;
  }
  :global(.darkmode .neutral) {
    border: 3px solid var(--neutral-300);
  }
</style>
