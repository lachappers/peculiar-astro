---
import { Icon } from "astro-icon/components";

import Button from "@components/common/Button.astro";

const {
  icon = "mdi:rocket",
  title = "Title",
  featureColor = "neutral",
  href = null,
  contentClasses = "",
  featureWidth,
  buttonText,
  buttonIcon = "mdi:arrow-right",
} = Astro.props;
const interactive = Astro.props.href ? "interactive" : "";
---

<div
  class={`feature w-full max-w-sm md:text-left text-center flex flex-col items-center gap-2 p-2 sm:gap-3 sm:p-4 ${featureWidth} ${featureColor} ${interactive}`}
>
  <div
    class={`flex w-full items-center justify-center md:justify-start gap-1 md:gap-2 ${contentClasses}`}
  >
    <Icon name={icon} class="flex-none text-4xl" />
    <h3 class="w-fit text-lg md:text-xl">{title}</h3>
  </div>
  <div
    class={`flex h-full max-w-[60ch] flex-col gap-2 text-sm last:mt-auto sm:text-base ${contentClasses}`}
  >
    <slot />
  </div>
  {
    buttonText && (
      <Button
        href={href}
        icon={buttonIcon}
        text={buttonText}
        buttonColor="blue"
        addClasses="w-fit size-small last:mt-auto"
      />
    )
  }
  {
    href && !buttonText && (
      <a href={href} class="sr-only">
        Read more about this feature
      </a>
    )
  }
</div>

<style lang="scss">
  @use "../assets/scss/base/breakpoint" as *;

  .feature {
    // position: relative;

    // display: flex;
    // flex-direction: column;
    // justify-content: space-between;
    // gap: 0.75rem;
    // height: 100%;

    border: 3px solid var(--neutral-900);
    box-shadow: 0.0625rem 0.0625rem 0 var(--secondary-100),
      0.5rem 0.5rem 0 var(--dark-100);
    border-radius: 0.5rem;

    // > * {
    //   position: relative;
    //   z-index: 2;
    // }

    // @include breakpoint(large) {
    //   width: 100%;
    // }
  }

  .content {
    // height: 100%;
    // // flex: auto;
    // display: flex;
    // flex-direction: column;
    // // justify-content: center;

    // gap: 0.75rem;
  }

  .content > div:last-child {
    // padding-top: 1rem;
    // padding: .5rem 0;
    // background-color: salmon;
    // border: 1px solid salmon;
  }

  :global(.feature [astro-icon]) {
    // width: 4rem;
    // color: var(--action-color);
  }

  :global(.darkmode .feature) {
    background-color: var(--dark-100);
    // border: 3px solid var(--neutral-300);
    box-shadow: 0.0625rem 0.0625rem 0 var(--dark-100),
      0.5rem 0.5rem 0 var(--secondary-100);
    border-radius: 0.5rem;
  }
  :global(.darkmode .neutral) {
    border: 3px solid var(--neutral-300);
  }
  .interactive {
    cursor: pointer;
  }
  .feature a:focus {
    text-decoration: underline;
  }
  .interactive:hover {
    box-shadow: 0 0 0 0.25rem;
  }

  .interactive:focus-within {
    box-shadow: 0 0 0 0.25rem;
  }

  .interactive:focus-within a:focus {
    text-decoration: none;
  }
</style>
<script>
  const cards = document.querySelectorAll(".feature");
  Array.prototype.forEach.call(cards, (card) => {
    let down,
      up,
      link = card.querySelector("a");
    card.onmousedown = () => (down = +new Date());
    card.onmouseup = () => {
      up = +new Date();
      if (up - down < 200) {
        link.click();
      }
    };
  });
</script>
