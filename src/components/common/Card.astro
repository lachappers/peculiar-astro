---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import { formatDate } from "@utils";
const {
  icon,
  category,
  cardLink,
  title = "Don't forget the title",
  author,
  date,
  avatar,
  tags,
  image,
  imageAlt,
} = Astro.props;
const interactive = Astro.props.cardLink ? "interactive" : "";
---

<!-- accessible card configurable for multi-purpose -->
<li
  class=` group overflow-hidden card w-full min-w-40 max-w-xs bg-[--surface-container-lowest] overflow-hidden rounded-lg border-2 border-[--font-color] shadow-postMod flex flex-col grow min-w-min ${interactive}`
>
  <div class="flex w-full flex-1 flex-col gap-2 p-6">
    <!-- if icon -->
    {
      icon && (
        <span class="inline-flex h-10 w-10 items-center justify-center rounded-full bg-[--secondary] text-[--on-secondary] ">
          <Icon name={icon} class="h-6 w-6" />
        </span>
      )
    }
    {
      category && (
        <span class="text-xs font-medium uppercase text-[--primary] ">
          {category}
        </span>
      )
    }
    {
      tags && (
        <ul class="flex gap-1">
          {tags.map((tag) => (
            <li class="rounded-sm bg-[--primary-fixed] text-xs font-medium uppercase text-[--on-primary-fixed]">
              <a href={"/tags/" + tag} class="relative p-1">
                {tag}
              </a>
            </li>
          ))}
        </ul>
      )
    }
    <h3 class="mt-2 block text-xl font-semibold capitalize">
      {
        cardLink ? (
          <a
            href={cardLink}
            class=" transform text-[--on-surface] transition-colors duration-300 hover:text-[--inverse-primary] hover:underline focus:outline-none"
            tabindex="0"
            role="link"
          >
            {title}
          </a>
        ) : (
          <span>{title}</span>
        )
      }
    </h3>

    <!-- if blog -->
    {
      author && (
        <div class=" flex flex-wrap items-center justify-between gap-2 last:mt-auto last:pt-4">
          <div class="flex items-center gap-2">
            {avatar && (
              <Image
                src={avatar}
                height="50"
                width="50"
                class="mx-2 h-10 w-10 rounded-full object-cover"
                alt=""
              />
            )}
            <p class="font-semibold ">{author}</p>
          </div>

          {date && (
            <span class="mx-1 text-xs uppercase text-[--on-surface-variant]">
              {formatDate(date)}
            </span>
          )}
        </div>
      )
    }
    <slot />
    <!-- if interactive -->
    {
      cardLink && (
        <span
          class="inline-flex w-full transform items-center gap-1 text-sm capitalize text-[--primary] transition-colors duration-300 last:mt-auto last:pt-4  hover:text-[--secondary] hover:underline"
          aria-hidden="true"
        >
          read more <Icon name="mdi:arrow-right" class="" />
        </span>
      )
    }
  </div>
  <!-- if image -->
  {
    image ? (
      <Image
        class="order-first h-1/3 w-full flex-none object-cover object-center transition-transform duration-500 ease-in-out group-hover:scale-105 "
        format="webp"
        height="200"
        width="200"
        src={image}
        alt={imageAlt}
        slot="top-image"
      />
    ) : (
      <slot name="top-image" />
    )
  }
</li>
<style>
  .interactive {
    cursor: pointer;
  }
  .card a:focus {
    text-decoration: underline;
  }
  .interactive:hover {
    box-shadow: 0 0 0 0.25rem;
  }

  .interactive:focus-within {
    box-shadow: 0 0 0 0.25rem;
  }

  .interactive:focus-within a:focus {
    text-decoration: none;
  }
</style>
<script>
  const cards = document.querySelectorAll(".card");
  Array.prototype.forEach.call(cards, (card) => {
    let down,
      up,
      link = card.querySelector("h3 a");
    card.onmousedown = () => (down = +new Date());
    card.onmouseup = () => {
      up = +new Date();
      if (up - down < 200) {
        link.click();
      }
    };
  });
</script>
