---
import Button from "@components/common/Button.astro";

// interface Props {
//   header: string
//   children: any
// }

// interface Props {
//   children: AccordionItem | AccordionItem[]
// }
const { accordianItems } = Astro.props;
---

{
  accordianItems &&
    accordianItems.map((section) => (
      <div class="accordion">
        <h3 class="my-2 text-base uppercase sm:text-xl">{section.section}</h3>
        <ul class="accordion__wrapper">
          {section.questions.map((item, index) => (
            <li class="accordion__item">
              <h4>
                <button
                  id={`accordion-header-${index}`}
                  class="accordion__header"
                  aria-expanded="false"
                  aria-controls={`accordion-panel-${index}`}
                  onclick="toggleAccordionItem()"
                >
                  {item.question}
                  <svg
                    class="header__toggle-indicator nav-icon flex-none"
                    aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 448 512"
                  >
                    <path
                      fill="currentColor"
                      d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                    />
                  </svg>
                </button>
              </h4>
              <div
                id={`accordion-panel-${index}`}
                role="region"
                class="accordion__panel"
                aria-labelledby={`accordion-header-${index}`}
              >
                <div class="panel__inner max-w-[75ch]">
                  {item.answer}
                  {item.cta && (
                    <Button
                      href={item.ctaLink}
                      addClasses="size-small w-fit mt-2"
                      icon="mdi:arrow-right"
                      text={item.cta}
                      buttonColor="color-secondary"
                    />
                  )}
                </div>
              </div>
            </li>
          ))}
        </ul>
      </div>
    ))
}

<script type="module">
  // variables
  const accordionItems = [...document.querySelectorAll(".accordion__item")];

  // functions
  const getPanelHeight = (accordionItem) => {
    const accordionInner = accordionItem.querySelector(".panel__inner");
    return accordionInner.getBoundingClientRect().height;
  };

  const openAccordionItem = (accordionItem) => {
    const accordionItemHeader =
      accordionItem.querySelector(".accordion__header");
    const accordionToggleIndicator = accordionItem.querySelector(
      ".header__toggle-indicator"
    );
    const accordionPanel = accordionItem.querySelector(".accordion__panel");

    accordionPanel.style.height = `${getPanelHeight(accordionItem)}px`;
    accordionItem.classList.add("is-active");
    accordionItemHeader.setAttribute("aria-expanded", true);
    accordionToggleIndicator.innerHTML = `<svg class="header__toggle-indicator" aria-hidden="true" data-prefix="fas" data-icon="minus" class="svg-inline--fa fa-minus fa-w-14" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"/></svg>`;
  };

  const closeAccordionItem = (accordionItem) => {
    const accordionItemHeader =
      accordionItem.querySelector(".accordion__header");
    const accordionToggleIndicator = accordionItem.querySelector(
      ".header__toggle-indicator"
    );
    const accordionPanel = accordionItem.querySelector(".accordion__panel");

    accordionItem.classList.remove("is-active");
    accordionPanel.style.height = 0;
    accordionItemHeader.focus();
    accordionItemHeader.setAttribute("aria-expanded", false);
    accordionToggleIndicator.innerHTML = `<svg class="header__toggle-indicator" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"/></svg>`;
  };

  const isAccordionOpen = (accordionItem) => {
    return accordionItem.classList.contains("is-active");
  };

  function toggleAccordionItem() {
    const accordionItem = event.target.closest(".accordion__item");
    if (!accordionItem || event.target.closest(".accordion__panel")) return;

    isAccordionOpen(accordionItem)
      ? closeAccordionItem(accordionItem)
      : openAccordionItem(accordionItem);
  }

  function recalculateHeight() {
    const toggledAccordionItems = accordionItems.filter((element) =>
      element.classList.contains("is-active")
    );

    toggledAccordionItems.forEach((toggledAccordionItem) => {
      const accordionPanel =
        toggledAccordionItem.querySelector(".accordion__panel");
      accordionPanel.style.height = `${getPanelHeight(toggledAccordionItem)}px`;
    });
  }

  // execution
  // accordionItems.forEach((item, index) => {
  //   const accordionItemHeader = item.querySelector(".accordion__header");
  //   const accordionItemPanel = item.querySelector(".accordion__panel");

  //   accordionItemHeader.setAttribute("id", `accordion-item${index + 1}`);
  //   accordionItemPanel.setAttribute("id", `item${index + 1}`);

  //   accordionItemHeader.setAttribute("aria-controls", `item${index + 1}`);
  //   accordionItemPanel.setAttribute(
  //     "aria-labelledby",
  //     `accordion-item${index + 1}`
  //   );
  // });

  document.addEventListener("keydown", (event) => {
    const accordionItem = event.target.closest(".accordion__item");

    if (event.key !== "Escape") return;
    if (!accordionItem) return;

    if (isAccordionOpen(accordionItem)) {
      closeAccordionItem(accordionItem);
    }
  });

  document.addEventListener("keydown", (event) => {
    if (!event.target.closest(".accordion__header")) return;

    const accordionWrapper = event.target.closest(".accordion__wrapper");
    const accordionItem = event.target.closest(".accordion__item");
    const accordionItems = [
      ...accordionWrapper.querySelectorAll(".accordion__item"),
    ];
    const index = accordionItems.findIndex(
      (element) => element === accordionItem
    );

    const { key } = event;

    let targetItem;

    if (key === "ArrowDown") {
      targetItem = accordionItems[index + 1];
    }

    if (key === "ArrowUp") {
      targetItem = accordionItems[index - 1];
    }

    if (targetItem) {
      event.preventDefault();
      targetItem.querySelector(".accordion__header").focus();
    }
  });

  window.toggleAccordionItem = toggleAccordionItem;
  window.onresize = recalculateHeight;
</script>

<style is:global>
  .accordion__wrapper {
    list-style: none;
    padding: 0;
  }
  .accordion__item,
  .accordion__header {
    width: 100%;
  }

  .accordion__header {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    border: 2px solid var(--outline);
    padding: 1rem;
  }

  .accordion__item .accordion__header {
    border-bottom: 0;
  }

  .accordion__item .accordion__header:focus {
    outline-offset: -6px;
    box-shadow: inset 0 0 0 2px var(--action-color);
  }

  .accordion__item:only-of-type .accordion__header,
  .accordion__item:last-of-type .accordion__header {
    border: 2px solid var(--outline);
  }

  .accordion__item:only-of-type .accordion__panel,
  .accordion__item:last-of-type .accordion__panel {
    border-bottom: 2px solid var(--outline);
  }

  .header__toggle-indicator {
    width: 20px;
  }

  .accordion__panel {
    visibility: hidden;
    overflow: hidden;
    height: 0;
    border-left: 2px solid var(--outline);
    border-right: 2px solid var(--outline);
    transition: height 0.3s ease-in-out, visibility 0s 0.3s;
  }

  .panel__inner {
    padding: 2rem 1rem;
  }

  .is-active .accordion__header {
    border: 2px solid var(--outline);
  }

  .is-active .accordion__panel {
    visibility: visible;
    height: auto;
    transition: height 0.3s ease-in-out, visibility 0s 0s;
  }
</style>
