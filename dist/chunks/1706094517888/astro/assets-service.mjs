import{isRemotePath,joinPaths}from"@astrojs/internal-helpers/path";import{AstroError,ExpectedImage,LocalImageUsedWrongly,MissingImageDimension,UnsupportedImageFormat,IncompatibleDescriptorOptions,UnsupportedImageConversion,MissingSharp}from"../astro.mjs";const VALID_SUPPORTED_FORMATS=["jpeg","jpg","png","tiff","webp","gif","svg","avif"],DEFAULT_OUTPUT_FORMAT="webp",DEFAULT_HASH_PROPS=["src","width","height","format","quality"];function isESMImportedImage(t){return"object"==typeof t}function isRemoteImage(t){return"string"==typeof t}function matchPattern(t,e){return matchProtocol(t,e.protocol)&&matchHostname(t,e.hostname,!0)&&matchPort(t,e.port)&&matchPathname(t,e.pathname,!0)}function matchPort(t,e){return!e||e===t.port}function matchProtocol(t,e){return!e||e===t.protocol.slice(0,-1)}function matchHostname(t,e,r){if(!e)return!0;if(!r||!e.startsWith("*"))return e===t.hostname;if(e.startsWith("**.")){const r=e.slice(2);return r!==t.hostname&&t.hostname.endsWith(r)}if(e.startsWith("*.")){const r=e.slice(1);return 1===t.hostname.replace(r,"").split(".").filter(Boolean).length}return!1}function matchPathname(t,e,r){if(!e)return!0;if(!r||!e.endsWith("*"))return e===t.pathname;if(e.endsWith("/**")){const r=e.slice(0,-2);return r!==t.pathname&&t.pathname.startsWith(r)}if(e.endsWith("/*")){const r=e.slice(0,-1);return 1===t.pathname.replace(r,"").split("/").filter(Boolean).length}return!1}function isRemoteAllowed(t,{domains:e=[],remotePatterns:r=[]}){if(!isRemotePath(t))return!1;const s=new URL(t);return e.some((t=>matchHostname(s,t)))||r.some((t=>matchPattern(s,t)))}function isLocalService(t){return!!t&&"transform"in t}function parseQuality(t){let e=parseInt(t);return Number.isNaN(e)?t:e}const baseService={propertiesToHash:DEFAULT_HASH_PROPS,validateOptions(t){if(!t.src||"string"!=typeof t.src&&"object"!=typeof t.src)throw new AstroError({...ExpectedImage,message:ExpectedImage.message(JSON.stringify(t.src),typeof t.src,JSON.stringify(t,((t,e)=>void 0===e?null:e)))});if(isESMImportedImage(t.src)){if(!VALID_SUPPORTED_FORMATS.includes(t.src.format))throw new AstroError({...UnsupportedImageFormat,message:UnsupportedImageFormat.message(t.src.format,t.src.src,VALID_SUPPORTED_FORMATS)});if(t.widths&&t.densities)throw new AstroError(IncompatibleDescriptorOptions);if("svg"===t.src.format&&(t.format="svg"),"svg"===t.src.format&&"svg"!==t.format||"svg"!==t.src.format&&"svg"===t.format)throw new AstroError(UnsupportedImageConversion)}else{if(t.src.startsWith("/@fs/")||!isRemotePath(t.src)&&!t.src.startsWith("/"))throw new AstroError({...LocalImageUsedWrongly,message:LocalImageUsedWrongly.message(t.src)});let e;if(t.width||t.height?!t.width&&t.height?e="width":t.width&&!t.height&&(e="height"):e="both",e)throw new AstroError({...MissingImageDimension,message:MissingImageDimension.message(e,t.src)})}return t.format||(t.format="webp"),t.width&&(t.width=Math.round(t.width)),t.height&&(t.height=Math.round(t.height)),t},getHTMLAttributes(t){const{targetWidth:e,targetHeight:r}=getTargetDimensions(t),{src:s,width:i,height:a,format:o,quality:n,densities:h,widths:c,formats:m,...g}=t;return{...g,width:e,height:r,loading:g.loading??"lazy",decoding:g.decoding??"async"}},getSrcSet(t){const e=[],{targetWidth:r}=getTargetDimensions(t),{widths:s,densities:i}=t,a=t.format??"webp";let o=t.width,n=1/0;isESMImportedImage(t.src)&&(o=t.src.width,n=o);const{width:h,height:c,...m}=t,g=[];if(i){const t=i.map((t=>"number"==typeof t?t:parseFloat(t))),e=t.sort().map((t=>Math.round(r*t)));g.push(...e.map(((e,r)=>({maxTargetWidth:Math.min(e,n),descriptor:`${t[r]}x`}))))}else s&&g.push(...s.map((t=>({maxTargetWidth:Math.min(t,n),descriptor:`${t}w`}))));for(const{maxTargetWidth:r,descriptor:s}of g){const i={...m};r!==o?i.width=r:t.width&&t.height&&(i.width=t.width,i.height=t.height),e.push({transform:i,descriptor:s,attributes:{type:`image/${a}`}})}return e},getURL(t,e){const r=new URLSearchParams;if(isESMImportedImage(t.src))r.append("href",t.src.src);else{if(!isRemoteAllowed(t.src,e))return t.src;r.append("href",t.src)}Object.entries({w:"width",h:"height",q:"quality",f:"format"}).forEach((([e,s])=>{t[s]&&r.append(e,t[s].toString())}));return`${joinPaths("/","/_image")}?${r}`},parseURL(t){const e=t.searchParams;if(!e.has("href"))return;return{src:e.get("href"),width:e.has("w")?parseInt(e.get("w")):void 0,height:e.has("h")?parseInt(e.get("h")):void 0,format:e.get("f"),quality:e.get("q")}}};function getTargetDimensions(t){let e=t.width,r=t.height;if(isESMImportedImage(t.src)){const s=t.src.width/t.src.height;r&&!e?e=Math.round(r*s):e&&!r?r=Math.round(e/s):e||r||(e=t.src.width,r=t.src.height)}return{targetWidth:e,targetHeight:r}}let sharp;const qualityTable={low:25,mid:50,high:80,max:100};async function loadSharp(){let t;try{t=(await import("sharp")).default}catch(t){throw new AstroError(MissingSharp)}return t}const sharpService={validateOptions:baseService.validateOptions,getURL:baseService.getURL,parseURL:baseService.parseURL,getHTMLAttributes:baseService.getHTMLAttributes,getSrcSet:baseService.getSrcSet,async transform(t,e,r){sharp||(sharp=await loadSharp());const s=e;if("svg"===s.format)return{data:t,format:"svg"};const i=sharp(t,{failOnError:!1,pages:-1,limitInputPixels:r.service.config.limitInputPixels});if(i.rotate(),s.height&&!s.width?i.resize({height:Math.round(s.height)}):s.width&&i.resize({width:Math.round(s.width)}),s.format){let t;if(s.quality){const e=parseQuality(s.quality);t="number"==typeof e?e:s.quality in qualityTable?qualityTable[s.quality]:void 0}i.toFormat(s.format,{quality:t})}const{data:a,info:o}=await i.toBuffer({resolveWithObject:!0});return{data:a,format:o.format}}};var sharp_default=sharpService;const sharp$1=Object.freeze(Object.defineProperty({__proto__:null,default:sharp_default},Symbol.toStringTag,{value:"Module"}));export{DEFAULT_HASH_PROPS,isESMImportedImage,isLocalService,isRemoteImage,sharp$1 as sharp};